%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\ivan\Desktop\cubesat-adcs\docs\step_response\step_response.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2022/06/14 16:18:02

%% Initialize variables.
filename = 'C:\Users\ivan\Desktop\cubesat-adcs\docs\step_response\step_response.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
wx = dataArray{:, 1};
wy = dataArray{:, 2};
wz = dataArray{:, 3};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% My code
close all;

% duty cycle defined in code (in percetage)
DC = 50.0;

figure;
hold off;
plot(wz);
title('Raw measurements')

% take first step response
wz_clean = wz(60:300);

% flip x cuz measurements are negative
wz_clean = -1 * wz_clean;

% scale measurements to rad/s because they are in mrad/s
wz_clean = 0.001 * wz_clean;

% calculate time vetor
fs = 10; % measurement refresh rate in Hz
T = fs^-1;
t = 0:T:T*(length(wz_clean)-1);

figure;
plot(t, wz_clean,'Linewidth',2);
grid on;
title('Raw step response')
xlabel('Time [s]');
ylabel('Angular velocity [rad/s]');

% finding max value and triming to that value
[M,I] = max(wz_clean);
wz_clean = wz_clean(1:I);
t = t(1:I);

figure;
plot(t, wz_clean, 'Linewidth', 2);
grid on;
title('Trimmed average response')
xlabel('Time [s]');
ylabel('Angular velocity [rad/s]');

% Odziv mogu modelirati funkcijom (parametre K i tau sam pronasao pomocu Curve Fitting App-a)
[fitresult, gof] = fit_step_response(t, wz_clean);
fitresult

K = fitresult.K;
tau = fitresult.Tau;
analythic = K * (1 - exp(-t./tau));

figure;
plot(t, wz_clean, t, analythic, 'Linewidth', 2);
grid on;
hold off;
grid on;
title('Measured vs. Analythic step response')
xlabel('Time [s]');
ylabel('Angular velocity [rad/s]');
legend('Measured','Analythic');

% Sada modeliram prijenosnu funkciju sustava prvog reda H1 = K/(1 + s*tau)
% H1 je prijenosna funkcija za DC->omega
H1 = tf([K], DC*[tau, 1]);

% S prijenosnom funkcijom H1 idem optimizirati PID regulator u PID Tuner App-u
fprintf('\nPID regulator za regulaciju kutne brzine:\n');
fprintf('Kp = 42.5 \nKi = 14.8 \nKd = 0\n\n');

% Sada modeliram prijenosnu funkciju sustava prvog reda H2 = K/(s(1 + s*tau))
% H2 je prijenosna funkcija za DC->theta
H2 = tf([K], DC*[tau, 1, 0]);

fprintf('PID regulator za regulaciju kuta:\n');
fprintf('Kp = 36.1 \nKi = 3.6 \nKd = 91\n');

